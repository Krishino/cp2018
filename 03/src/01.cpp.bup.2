#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <random>
#include <fstream>

int main(int argc, char *argv[])
{
    int Schritte = pow(10, 1);

    // Erstelle mehrere H
    std::vector<double> h = {-5., -4., -3., -2., -1., 0., 1., 2., 3., 4.};
    double H;
    int anzahl_H = pow(10, 2);

    // wahrscheinlichkeiten fuer die beiden zustaende
    double p1, p2;

    // start und endvektor
    // std::vector<double> s0;
    std::vector<double> s1 = {0., 0.};
    std::vector<std::vector<double>> M;

    // start spin
    double s0 = 1.;

    // Random Numbers
    std::mt19937 rng;
    rng.seed(std::random_device()());
    std::uniform_real_distribution<double> dist_H(-5., 5.);

    std::uniform_real_distribution<double> dist_uni(0., 1.);

    // Outfiles Vorbereiten
    std::cout << "Magnetfeld: Wahrscheinlichkeiten Spin = [1 -1]" << std::endl;
    std::ofstream myfile ("./build/01_b.txt");
    myfile << "# H p(s=1) p(s=-1)" << std::endl;

    // Main Loop
    for (int i = 0; i < anzahl_H; i++) {
        // H = h[i];  // weise H zu
        H = dist_H(rng);
        printf("H: %f\n", H);
        s0 = 1.;
        printf("s0: %f\n", s0);
        // s0 = {0., 1.};

        // passe wahrscheinlichkeiten an, jenachdem was H ist
        p1 = pow(M_E, H) / (pow(M_E, H) + pow(M_E, -H));
        p2 = pow(M_E, -H) / (pow(M_E, H) + pow(M_E, -H));

        double s1 = 0;

        for (int i = 0; i < Schritte; i++) {

            // aktuelle energie
            double E_current = pow(M_E, - H * s0);
            printf("E_current: %f\n", E_current);

            // spin flip im magnetfeld
            s1 = s0 * p1 + s0 * p2;
            printf("s1: %f\n", s1);

            // energie nach flip
            double E_later = pow(M_E, - H * s1);
            printf("E_later: %f\n", E_later);

            if (E_current > E_later) {
                printf("energy flip: ");
                s1 *= -1;
            }
            // Random Spin Flip
            else if (E_current > dist_uni(rng)) {
                printf("random flip: ");
                s0 *= -1;
            }
            printf("s0: %f\n", s0);

            printf("s1: %f\n", s1);

            printf("-------\n");
            s0 = s1;
        }
        // ausgabe
        if (myfile.is_open()) {
            std::cout << "H = " << H << " :  [ ";
            myfile << H << ",";
            std::cout << s1 << " " ;  // terminal
            std::cout << 1 - s1 << " " ;  // terminal
            myfile << s1 << ","; // file
            myfile << 1 - s1 << ","; // file
            std::cout << "]" << std::endl;
            myfile << std::endl;
        }
    }
    myfile.close();
    return 0;
}
